write_default_scalars:
  from_to_capacity_link: {
    "var_name": "from_to_capacity",
    "type": link,
    "tech": None,
    "which": "high_capacity",
    "var_unit": "MW",
  }
  to_from_capacity_link: {
    "var_name": "to_from_capacity",
    "type": link,
    "tech": None,
    "which": "high_capacity",
    "var_unit": "MW",
  }
  loss_link: {# TODO: Add useful loss to default-option in write_default_scalars.py
    "var_name": "loss",
    "type": link,
    "tech": None,
    "which": "zeros",
    "var_unit": "None",
  }
  input_parameters_storage: {
    "var_name": "input_parameters",
    "type": storage,
    "tech": None,
    "which": "variable_costs",
    "var_unit": "None",
  }
  input_parameters: {
    "var_name": "input_parameters",
    "type": None,
    "tech": None,
    "which": "empty_dict",
    "var_unit": "None",
  }
  marginal_cost_volatile: {
    "var_name": "marginal_cost",
    "type": volatile,
    "tech": None,
    "which": "zeros",
    "var_unit": "EUR/MWh",
  }
  emissions_not_modeled: {
    "var_name": "emissions_not_modeled",
    "type": None,
    "tech": None,
    "which": "emissions_not_modeled",
    "var_unit": "kg_CO2_eq/MWh",
  }
  emissions_1990: {
    "var_name": "emissions_1990",
    "type": None,
    "tech": None,
    "which": "zeros",
    "var_unit": "kg_CO2_eq/MWh",
  }
  emission_reduction_factor: {
    "var_name": "emission_reduction_factor",
    "type": None,
    "tech": None,
    "which": "emission_reduction_factor",
    "var_unit": "None",
  }

non_region_specific_scalars: [
    "capacity_cost_overnight",
    "condensing_efficiency",
    "efficiency",
    "electric_efficiency",
    "fixom_cost",
    "lifetime",
    "loss_rate",
    "marginal_cost",
    "storage_capacity_cost_overnight",
    "storage_fixom_cost",
    "thermal_efficiency",
    "wacc",
    "expandable",
    "carrier_cost"
  ]

region_specific_scalars: [
    "amount",
    "capacity",
    "capacity_potential",
    "storage_capacity",
    "storage_capacity_potential"
  ]
